name: CI

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: build
    runs-on: ubuntu-20.04
    env:
      TARGET_DEVICE: ${{ matrix.target }}
    strategy:
      matrix:
        target: [ "domywifi-dw33d" ]
    steps:
      - name: Initialize token
        env:
          DEBIAN_FRONTEND: noninteractive
          MY_TOKEN_SECRET: ${{ secrets.MY_TOKEN }}
          GITHUB_TOKEN_SECRET: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${MY_TOKEN_SECRET}" ]; then
            echo "MY_TOKEN=${MY_TOKEN_SECRET}" >> $GITHUB_ENV
          else
            echo "MY_TOKEN=${GITHUB_TOKEN_SECRET}" >> $GITHUB_ENV
          fi

      - name: Cancel previous runs
        uses: HiGarfield/cancel-workflow-action@main
        continue-on-error: true
        with:
          all_but_latest: true
          access_token: ${{ env.MY_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
          fetch-depth: 0

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo swapoff -a
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler coreutils aria2
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone https://github.com/HiGarfield/lede-17.01.4-Mod.git -b master lede-17.01.4-Mod
          ln -sf /workdir/lede-17.01.4-Mod $GITHUB_WORKSPACE/lede-17.01.4-Mod

          WORKING_DIR="$GITHUB_WORKSPACE/lede-17.01.4-Mod"
          echo "WORKING_DIR=${WORKING_DIR}" >>$GITHUB_ENV
          cd "${WORKING_DIR}"
          LEDE_VERSION="$(cat "${WORKING_DIR}/version")"
          echo "LEDE_VERSION=${LEDE_VERSION}" >>$GITHUB_ENV
          LEDE_OUTPUT_NAME="lede-${LEDE_VERSION}-${TARGET_DEVICE}"
          echo "LEDE_OUTPUT_NAME=${LEDE_OUTPUT_NAME}" >>$GITHUB_ENV
          echo "FIRMWARE=${WORKING_DIR}/out" >> $GITHUB_ENV

          rm -f "${WORKING_DIR}/package/firmware/wireless-regdb/patches/501-limit-tx-power.patch"

          cp -f "${WORKING_DIR}/.github/backup/download.pl" "${WORKING_DIR}/scripts/download.pl"

      - name: Get architecture
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          TARGET_DEVICE_ARCH="$(sed -n 's/^CONFIG_TARGET_BOARD=\"\(.*\)\"/\1/p' "conf/.config.$TARGET_DEVICE")"
          echo "TARGET_DEVICE_ARCH=${TARGET_DEVICE_ARCH}" >>$GITHUB_ENV

      - name: Cache
        uses: HiGarfield/cachewrtbuild@test
        with:
          ccache: 'true'
          mixkey: ${{ env.TARGET_DEVICE_ARCH }}
          prefix: ${{ env.WORKING_DIR }}

      - name: Load custom configuration
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          sed -i 's/HOST_BUILD_PARALLEL ?=/HOST_BUILD_PARALLEL ?= 1/g' include/host-build.mk
          sed -i 's/PKG_BUILD_PARALLEL ?=/PKG_BUILD_PARALLEL ?= 1/g' include/package.mk
          # ./clean_all.sh
          cp -f "conf/.config.$TARGET_DEVICE" .config
          make defconfig V=s
          
      
      - name: Download package
        id: package
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          for i in $(seq 6 -1 1); do make download -j${i} && break; done
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          
      - name: SSH connection to Actions 
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Compile firmware
        id: compile
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo -e "$(($(nproc) + 1)) thread compile"
          make -j$(($(nproc) + 1)) || make -j1 V=s
          rm -rf ${FIRMWARE}
          mkdir -p ${FIRMWARE}
          cp -u -f bin/targets/*/*/${LEDE_OUTPUT_NAME}-*-sysupgrade.bin ${FIRMWARE}/
          cd ${FIRMWARE}/
          for f in *.bin; do mv "$f" "$(echo "$f" | sed -e 's/-squashfs//g' -e 's/-sysupgrade//g')"; done
          for f in *.bin; do sha256sum "$f" | awk '{print $1}' >"${f}.sha256sum"; done
          echo "::set-output name=status::success"

      - name: Upload images to Releases
        if: ${{ steps.compile.outputs.status == 'success' }}
        uses: HiGarfield/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ env.MY_TOKEN }}
        with:
          file: ${{ env.FIRMWARE }}/*
          overwrite: true
          tag_name: ${{ env.LEDE_VERSION }}
          draft: false

      - name: Remove old releases
        uses: HiGarfield/delete-older-releases@master
        continue-on-error: true
        with:
          keep_latest: 1
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ env.MY_TOKEN }}

  dl:
    name: dl
    runs-on: ubuntu-20.04
    steps:
      - name: Initialize token
        env:
          DEBIAN_FRONTEND: noninteractive
          MY_TOKEN_SECRET: ${{ secrets.MY_TOKEN }}
          GITHUB_TOKEN_SECRET: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "${MY_TOKEN_SECRET}" ]; then
            echo "MY_TOKEN=${MY_TOKEN_SECRET}" >> $GITHUB_ENV
          else
            echo "MY_TOKEN=${GITHUB_TOKEN_SECRET}" >> $GITHUB_ENV
          fi

      - name: Cancel previous runs
        uses: HiGarfield/cancel-workflow-action@main
        continue-on-error: true
        with:
          all_but_latest: true
          access_token: ${{ env.MY_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
          fetch-depth: 0

      - name: Initialize environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo swapoff -a
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler coreutils aria2
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone https://github.com/HiGarfield/lede-17.01.4-Mod.git -b master lede-17.01.4-Mod
          ln -sf /workdir/lede-17.01.4-Mod $GITHUB_WORKSPACE/lede-17.01.4-Mod

          WORKING_DIR="$GITHUB_WORKSPACE/lede-17.01.4-Mod"
          echo "WORKING_DIR=${WORKING_DIR}" >>$GITHUB_ENV
          cd "${WORKING_DIR}"
          LEDE_VERSION="$(cat "${WORKING_DIR}/version")"
          echo "LEDE_VERSION=${LEDE_VERSION}" >>$GITHUB_ENV
          LEDE_OUTPUT_NAME="dl-${LEDE_VERSION}"
          echo "LEDE_OUTPUT_NAME=${LEDE_OUTPUT_NAME}" >>$GITHUB_ENV
          OUTPUT_DIR="${WORKING_DIR}/out"
          echo "OUTPUT_DIR=${OUTPUT_DIR}" >> $GITHUB_ENV

          rm -f "${WORKING_DIR}/package/firmware/wireless-regdb/patches/*-limit-tx-power.patch"

          cp -f "${WORKING_DIR}/.github/backup/download.pl" "${WORKING_DIR}/scripts/download.pl"

      - name: Download
        id: download
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          sed -i 's/HOST_BUILD_PARALLEL ?=/HOST_BUILD_PARALLEL ?= 1/g' include/host-build.mk
          sed -i 's/PKG_BUILD_PARALLEL ?=/PKG_BUILD_PARALLEL ?= 1/g' include/package.mk
          ./download_all.sh
          mkdir -p "${OUTPUT_DIR}"
          zip -j "${OUTPUT_DIR}/${LEDE_OUTPUT_NAME}.zip" dl/*
          sha256sum "${OUTPUT_DIR}/${LEDE_OUTPUT_NAME}.zip" | awk '{print $1}' >"${OUTPUT_DIR}/${LEDE_OUTPUT_NAME}.zip.sha256sum"
          echo "::set-output name=status::success"

      - name: Upload assets to Releases
        if: ${{ steps.download.outputs.status == 'success' }}
        uses: HiGarfield/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ env.MY_TOKEN }}
        with:
          file: ${{ env.OUTPUT_DIR }}/*
          overwrite: true
          tag_name: ${{ env.LEDE_VERSION }}
          draft: false

      - name: Remove old releases
        uses: HiGarfield/delete-older-releases@master
        continue-on-error: true
        with:
          keep_latest: 1
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ env.MY_TOKEN }}
